{"name":"Cloudpy","tagline":"run python script on remote cloud platform","body":"cloudpy\r\n=======\r\nrun python script in virtual environment on a remote platform\r\n\r\n\r\n# Install\r\n    $pip install cloudpy\r\nAnd a config file is also needed. You can put the configurations in `/etc/cloudpy.conf`, `~/.cloudpy.conf`, or `./cloudpy.conf`.    \r\nSee the cloudpy.conf for a sample.\r\n    \r\n# Usage\r\n## The easy way\r\n    $cloudpy your_script\r\n## The hard way\r\n    $cloudpy -P your_script\r\nYou can do some modifications to the packed structure here\r\n\r\n    $cloudpy -S your_package_name\r\nSend to remote host. The package name has been return by \"-P\" command\r\n\r\n    $cloudpy -R your_package_name\r\nRun!\r\n    \r\n    $cloudpy -C your_package_name\r\n    \r\n=======\r\n\r\n\r\nClean.\r\n\r\n=======\r\n\r\ncloudpy可以将python程序（以及依赖的库和文件）打包至另一台机器，自动配置依赖的虚拟环境并实时返回结果。\r\n\r\ncloudpy使用ssh在远程主机操作，因此需要能使用publish key 登陆ssh到远程主机。\r\n\r\n**如果你需要在一台机器上编写程序并在另一台机器上测试/运行程序，cloudpy可能适合你。**\r\n\r\n*本地不需要安装要用的第三方库，但安装将会提高识别的准确度。*\r\n\r\n*可以依赖其他文件、包或模块，cloudpy会试着解析所有依赖的文件并打包*\r\n\r\n# 安装\r\n\r\n## Linux/Mac OS X\r\n\r\n在本地和远程主机：    \r\n\r\n    $ pip install cloudpy\r\n\r\n远程主机还需要安装`virtualenv`。\r\n\r\n## Windows\r\n\r\n本地：\r\n\r\n1. 安装Cygwin，安装rsync、openssh，配置ssh client\r\n2. 安装pip\r\n3. 安装cloudpy\r\n\r\n       $ pip install cloudpy\r\n\r\n远程主机不支持Windows\r\n\r\n\r\n# 配置\r\ncloudpy 依次在以下位置查找配置文件：\r\n\r\n    1. /etc/cloudpy.conf\r\n    2. ~/.cloudpy.conf\r\n    3. ./cloudpy.conf\r\n    \r\n后一项的配置会覆盖前一项。\r\n\r\n配置文件包含一个python字典：\r\n\r\n    {\r\n        \"host\":\"ubuntu@192.168.70.145\",\r\n        \"depository\":\"cloudpy_depo\",\r\n        \"host_sep\":\"/\"\r\n    }\r\n    \r\n`host`为ssh到远程主机的用户名和地址。    \r\n`depository`为远程主机上缓存文件的目录。    \r\n`host_sep`为远程主机目录分隔符，大多数情况下为`\"/\"`\r\n\r\n# 使用\r\n## 简单的方法:    \r\n\r\n    $ cloudpy your_script\r\n\r\n## 分步执行\r\n\r\ncloudpy的执行分四步：pack、sync、run和clean。\r\n\r\n### Pack\r\n\r\npack步骤会查找脚本依赖的库、其他python文件并猜测使用到的其他文件，将之整理到合适的目录中。使用`-P` 参数执行pack过程。\r\n\r\n    $ cloudpy -P your_script\r\n\r\n命令返回生成的目录名称作为ID。\r\n\r\n可以使用参数`-n name`和`-f`.\r\n\r\n`-n name`参数可以指定生成的目录名称。这样可以复用之前在远程机器上生成和安装好的环境。\r\n\r\n`-f`参数指定猜测可能用到的其他文件。\r\n\r\n#### 生成的信息文件说明\r\n生成的依赖信息在`conf/mods`中，不确定的依赖也在此文件中给出建议和可能的选项，需要手工修改指定。\r\n\r\n### Sync\r\nSync操作将Pack生成的目录同步到远程主机。`ID`为pack步骤返回的ID。\r\n\r\n    $ cloudpy -S ID\r\n\r\n### Run\r\nRun操作在远程主机执行脚本并实时返回结果。\r\n\r\n    $ cloudpy -R ID\r\n    \r\n可以使用`-N`、`-c`参数。\r\n\r\n`-N`参数输出更多的信息。包括环境的生成和配置信息。\r\n\r\n`-c`参数在程序运行完后删除远程主机相关缓存和环境。\r\n\r\n### Clean\r\nClean操作删除本地生成的目录。\r\n\r\n    $ cloudpy -C ID\r\n\r\n## 参数说明\r\n不指定具体执行步骤时，前述参数也可以使用。参数会被自动应用到对应的步骤。\r\n\r\n如果不指定`-n name`，本地临时生成的目录完成后会被删除（相当于`-c`参数）。指定`-n name`参数时，不会执行Clean操作。\r\n\r\n# cloudpy-eval\r\n\r\n`cloudpy-eval`在本机创建虚拟环境并执行一个pack好之后的包。\r\n\r\n例如想要在远程主机后台运行某个程序，可以先：\r\n\r\n    $ cloudpy -PSC your_script\r\n    \r\n将需要的文件同步到远程主机。然后ssh到远程主机并：\r\n\r\n    $ nohup cloudpy-eval /path/to/depository/ID &\r\n\r\n这样你可以exit并稍后重新ssh回来查看运行结果。\r\n\r\n可以使用`-q`和`-c`参数：\r\n\r\n`cloudpy-eval`默认输出全部信息，包括创建和安装虚拟环境。使用`-q`只显示程序输出。\r\n\r\n`-c`参数在执行完成后删除包。\r\n\r\n=====\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}